# install plug.kak if not have
evaluate-commands %sh{
    plugins="$kak_config/plugins"
    mkdir -p "$plugins"
    [ ! -e "$plugins/plug.kak" ] && \
        git clone -q https://github.com/andreyorst/plug.kak.git "$plugins/plug.kak"
    printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}
plug "andreyorst/plug.kak" noload
plug 'greenfork/active-window.kak' %{
    set-face global InactiveCursor default,rgb:4c4c4c
}

plug "occivink/kakoune-sudo-write"
plug "kak-lsp/kak-lsp" defer %{
    set global lsp_completion_trigger ''
}
plug 'https://gitlab.com/kstr0k/fast-context.kak' demand fast-context %{
    set-option global fast_context_max_width 120
    map global user -docstring 'show context' c ': fast-context-show<ret>'
} 

define-command -override lsp-engage -docstring 'Enable language server' %{
    lsp-enable-window
    map window normal -docstring 'lsp user mode' \' ': enter-user-mode lsp<ret>'
    map global goto m '<esc>: lsp-implementation<ret>' -docstring 'implementation'
    # remove-hooks window auto-signature-help
    # hook -group auto-signature-help window InsertIdle .* lsp-signature-help
    # hook -group auto-signature-help window InsertCompletionShow .* lsp-signature-help
}

hook global InsertCompletionShow .* %{
    try %{
        # this command temporarily removes cursors preceded by whitespace;
        # if there are no cursors left, it raises an error, does not
        # continue to execute the mapping commands, and the error is eaten
        # by the `try` command so no warning appears.
        execute-keys -draft 'h<a-K>\h<ret>'
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
        hook -once -always window InsertCompletionHide .* %{
            unmap window insert <tab> <c-n>
            unmap window insert <s-tab> <c-p>
        }
    }
}

set global tabstop 4
set global indentwidth 4

hook global WinSetOption filetype=go %{ # if any window has filetype go set
    lsp-engage
    set window indentwidth 0
    set window formatcmd goimports # set formatcmd to goimports for that window
    set window makecmd 'go build ./...'
    hook window BufWritePre .* %{ # and use it before write
        format
    }
}

hook global WinSetOption filetype=python %{
    lsp-engage
    set window indentwidth 4
    set window formatcmd "autopep8 -"
    hook window BufWritePre .* %{
        format
    }
}

hook global WinSetOption filetype=sql %{
    enable-auto-indent
}

hook global WinSetOption filetype=protobuf %{
    set window indentwidth 2
}

hook global WinSetOption filetype=makefile %{
    set window indentwidth 0
}

hook global WinSetOption filetype=yaml %{
    set window indentwidth 2
}

evaluate-commands %sh{
    kcr init kakoune
}

 
add-highlighter -override global/ number-lines -hlcursor
add-highlighter -override global/ show-matching
# set -add global autoinfo normal
set global ui_options terminal_assistant=none
set global scrolloff 2,2
set global autoreload true

# clipboard command 
map global user -docstring 'copy to clipboard' y '<a-|>xclip -se c<ret>'
map global user -docstring 'paste from clipboard(insert)' P '!xclip -o -se c<ret>'
map global user -docstring 'paste from clipboard(append)' p '<a-!>xclip -o -se c<ret>'
map global user -docstring 'kill to clipboard' d '<a-|>xclip -se c<ret><a-d>'
map global user -docstring 'replace from clipboard' R 'd!xclip -o -se c<ret>'

map global normal -docstring 'comment line' '#' ': comment-line<ret>'
map global normal -docstring 'comment block' '<a-#>' ': comment-block<ret>'
# map global normal * ':reg slash "\Q%reg{dot}\E"<ret>'

alias global g grep
set global grepcmd "rg --vimgrep --trim"

map global user -docstring 'find file' f ':f '
map global user -docstring 'find buffer' b ':b '
map global user -docstring 'grep' g ':g '

define-command -override edit-kakrc -docstring 'open kakrc in a new buffer' %{
    evaluate-commands %sh{
        printf "edit $kak_config/kakrc"
    }
}

define-command -override pwd -docstring 'print working directory' %{
    echo %sh{ pwd }
}

define-command -override dy -docstring 'yank current directory' %{
    nop %sh{ pwd > $HOME/.wd }
}

define-command -override dp -docstring 'paste current directory' %{
    cd %sh{ cat $HOME/.wd }
}

map global user -docstring "split" s ':new<ret>'
map global user -docstring "edit kakrc" k ':edit-kakrc<ret>'
# map global user -docstring "edit bashrc" b ':edit ~/.bashrc<ret>'

# hook global WinSetOption filetype=go "set buffer indentwidth 0"
# hook global WinSetOption filetype=yaml "set buffer indentwidth 2"

enable-auto-pairs
map -docstring 'reload kakrc' global normal <F5> ':source-kakrc; echo reloaded kakrc<ret>'

# map global insert <tab> '<a-;><gt>'
# map global insert <s-tab> '<a-;><lt>'

hook global InsertChar \t %{
    try %{
        check-tabs
    } catch %{
        execute-keys -draft "h<a-h><a-k>\A\h+\z<ret><a-;>;%opt{indentwidth}@"
    }
}

define-command -override check-tabs %{ evaluate-commands %sh{
    if [ $kak_opt_indentwidth != "0" ]; then
        echo "fail not tabs"
    fi
}}

hook global InsertDelete ' ' %{ try %{
    execute-keys -draft 'h<a-h><a-k>\A\h+\z<ret>i<space><a-;><lt>'
}}


define-command -override ft -params 1 -docstring 'set buffer filetype' %{
    set buffer filetype %arg{1}
}

map global normal q ":surround<ret>"

map global user -docstring "laucn broot" t ": > broot<ret>"

define-command -override -docstring "diff tool" \
diff-tool %{
    $ git dt
}

alias global dt diff-tool

define-command -override -docstring "diff tool" \
diff-tool-file %{
    $ git df %val{buffile}
}

alias global df diff-tool-file

define-command -override -docstring %{
    go build ./...
} go-build %{ evaluate-commands %sh{
     output=$(mktemp -d "${TMPDIR:-/tmp}"/kak-go-build.XXXXXXXX)/fifo
     mkfifo ${output}
     ( go build ./... 2>&1 | tr -d '\r' > ${output} 2>&1 & ) > /dev/null 2>&1 < /dev/null

     printf %s\\n "evaluate-commands -try-client '$kak_opt_toolsclient' %{
               edit! -fifo ${output} *build*
               set-option buffer filetype grep
               set-option buffer grep_current_line 0
               hook -always -once buffer BufCloseFifo .* %{
                   try %{
                       exec '<a-K>^$<ret>'
                       eval -client '$kak_client' %{ echo -markup '{Error}build failed' }
                   } catch %{
                       eval -client '$kak_client' %{ echo 'build ok' }
                       db '*build*' 
                   }
                   nop %sh{ rm -r $(dirname ${output}) }
           }}"
}}

alias global gb go-build

define-command -override -docstring "go test ./..." \
go-test %{
    e -scratch '*test*'
    exec '%d'
    exec '!go test ./... 2>&1<ret>'
    ft grep
    exec 'gk'
    try %{
        exec '<a-K>^$<ret>'
    } catch %{
        db '*test*'
        echo "test OK"
    }
}

alias global gt go-test

map global normal @ q
map global normal <a-@> Q

define-command -override -docstring 'open history buffer' \
hist %{
    e! -scratch '*hist*'
    exec '":<a-P>a<ret><esc><a-k>^(hist)?$\n<ret>d<space>dx'
}

map global normal <c-w> ":db<ret>"

set-option global files_show_hidden true
# set-option global files_long_format true

plug "raiguard/one.kak" theme defer %{
    # one-enable-fancy-underlines
}
colorscheme one-dark

hook global BufSetOption "filetype=%opt{files_browse_buffer}" %{
    map buffer normal '<ret>' ': files-cd<ret>'
    map buffer normal '<backspace>' ': files-cd-parent<ret>'
    map buffer normal 'm' ": files-add-entry-to-selection<ret>"
    map buffer normal 'M' ": files-add-cwd-to-selection<ret>"
    map buffer normal '.' ": files-toggle-show_hidden<ret>"
    map buffer normal '\' ": files-toggle-long_format<ret>"
    map buffer normal 'r' ": files-redraw-browser<ret>"
    map buffer normal 'S' ": files-focus-selections<ret>"
    map buffer normal 't' ": files-open-in-terminal<ret>"
}

hook global BufSetOption "filetype=%opt{files_selection_buffer}" %{
    map buffer normal <ret> ': files-commit-operations<ret>'
}

# define-command -override connect-terminal %{
#     nop %sh{
#         export KAK_CLIENT="$kak_client"
#         export KAK_SESSION="$kak_session"
#         setsid -f alacritty --working-directory $(pwd)
#     }
# }
