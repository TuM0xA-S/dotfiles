source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload
plug "raiguard/one.kak" theme
plug 'greenfork/active-window.kak' %{
    set-face global InactiveCursor default,rgb:4c4c4c
}

plug "occivink/kakoune-sudo-write"
plug "kak-lsp/kak-lsp"

define-command -override lsp-engage -docstring 'Enable language server' %{
    lsp-enable-window
    map window normal -docstring 'lsp user mode' \' ': enter-user-mode lsp<ret>'
    map global goto m '<esc>: lsp-implementation<ret>' -docstring 'implementation'
    # remove-hooks window auto-signature-help
    # hook -group auto-signature-help window InsertIdle .* lsp-signature-help
    # hook -group auto-signature-help window InsertCompletionShow .* lsp-signature-help
}

hook global InsertCompletionShow .* %{
    try %{
        # this command temporarily removes cursors preceded by whitespace;
        # if there are no cursors left, it raises an error, does not
        # continue to execute the mapping commands, and the error is eaten
        # by the `try` command so no warning appears.
        execute-keys -draft 'h<a-K>\h<ret>'
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
        hook -once -always window InsertCompletionHide .* %{
            unmap window insert <tab> <c-n>
            unmap window insert <s-tab> <c-p>
        }
    }
}

# plug "lePerdu/kakboard" %{
#     hook global WinCreate .* %{ kakboard-enable }
# }

set global tabstop 4
set global indentwidth 4

hook global WinSetOption filetype=go %{ # if any window has filetype go set
    lsp-engage
    set window indentwidth 0
    set window formatcmd goimports # set formatcmd to goimports for that window
    hook window BufWritePre .* %{ # and use it before write
        format
    }
}

hook global WinSetOption filetype=python %{
    lsp-engage
    set window indentwidth 4
    set window formatcmd "autopep8 -"
    hook window BufWritePre .* %{
        format
    }
}

hook global WinSetOption filetype=yaml %{
    set window indentwidth 2
}

evaluate-commands %sh{
    kcr init kakoune
}


hook global ModuleLoaded tmux %{
    alias global popup tmux-terminal-vertical
}

colorscheme one-dark
 
add-highlighter -override global/ number-lines -hlcursor
add-highlighter -override global/matching-brackets show-matching
# set -add global autoinfo normal
set global ui_options ncurses_assistant=none
set global scrolloff 2,2
set global autoreload true

# clipboard command 
map global user -docstring 'copy to clipboard' y '<a-|>xclip -se c<ret>'
map global user -docstring 'paste from clipboard(insert)' P '!xclip -o -se c<ret>'
map global user -docstring 'paste from clipboard(append)' p '<a-!>xclip -o -se c<ret>'
map global user -docstring 'kill to clipboard' d '<a-|>xclip -se c<ret><a-d>'
map global user -docstring 'replace from clipboard' R 'd!xclip -o -se c<ret>'

map global normal -docstring 'comment line' '#' ': comment-line<ret>'
map global normal -docstring 'comment block' '<a-#>' ': comment-block<ret>'
# map global normal * ':reg slash "\Q%reg{dot}\E"<ret>'

alias global g grep
set global grepcmd "rg --vimgrep --trim"

map global user -docstring 'find file' f ':f '
map global user -docstring 'find buffer' b ':b '
map global user -docstring 'grep' g ':g '

define-command -override edit-kakrc -docstring 'open kakrc in a new buffer' %{
    evaluate-commands %sh{
        printf "edit $kak_config/kakrc"
    }
}

define-command -override pwd -docstring 'print working directory' %{
    echo %sh{ pwd }
}

define-command -override dy -docstring 'yank current directory' %{
    nop %sh{ pwd > $HOME/.wd }
}

define-command -override dp -docstring 'paste current directory' %{
    cd %sh{ cat $HOME/.wd }
}

# define-command -override -docstring "vsplit [<commands>]: split tmux vertically" \
# vsplit -params .. -command-completion %{
#         tmux-terminal-horizontal "kak -c %val{session} -e ""%arg{@}"" && bash"
# }

# define-command -override -docstring "split [<commands>]: split tmux horizontally" \
# split -params .. -command-completion %{
#         tmux-terminal-vertical "kak -c %val{session} -e ""%arg{@}"" && bash"
# }

# define-command -override -docstring "tabnew [<commands>]: create new tmux window" \
# tabnew -params .. -command-completion %{
#         tmux-terminal-window "kak -c %val{session} -e ""%arg{@}"" && bash"
# }

# map global user -docstring "vertical split" v ':vsplit '
# map global user -docstring "horizontal split" s ':split '
map global user -docstring "split" s ':new<ret>'
map global user -docstring "edit kakrc" k ':edit-kakrc<ret>'
# map global user -docstring "edit bashrc" b ':edit ~/.bashrc<ret>'

# hook global WinSetOption filetype=go "set buffer indentwidth 0"
# hook global WinSetOption filetype=yaml "set buffer indentwidth 2"

enable-auto-pairs
map -docstring 'reload kakrc' global normal <F5> ':source-kakrc; echo reloaded kakrc<ret>'

# map global insert <tab> '<a-;><gt>'
# map global insert <s-tab> '<a-;><lt>'

hook global InsertChar \t %{
    try %{
        check-tabs
    } catch %{
        execute-keys -draft "h<a-h><a-k>\A\h+\z<ret><a-;>;%opt{indentwidth}@"
    }
}

define-command -override check-tabs %{ evaluate-commands %sh{
    if [ $kak_opt_indentwidth != "0" ]; then
        echo "fail not tabs"
    fi
}}

hook global InsertDelete ' ' %{ try %{
    execute-keys -draft 'h<a-h><a-k>\A\h+\z<ret>i<space><a-;><lt>'
}}


define-command -override ft -params 1 -docstring 'set buffer filetype' %{
    set buffer filetype %arg{1}
}

map global normal q ":surround<ret>"

map global user -docstring "laucn broot" t ": > broot<ret>"

define-command -override -docstring "diff tool" \
diff-tool %{
    $ git dt
}

alias global dt diff-tool

define-command -override -docstring "diff tool" \
diff-tool-file %{
    $ git df %val{buffile}
}

alias global df diff-tool-file

define-command -override -docstring "go build ./..." \
go-build %{
    e -scratch '*build*'
    exec '%d'
    exec '!go build ./... 2>&1<ret>'
    ft grep
    exec 'gk'
    try %{
        exec '<a-K>^$<ret>'
    } catch %{
        db '*build*'
        echo "build OK"
    }
}

alias global gb go-build

define-command -override -docstring "go test ./..." \
go-test %{
    e -scratch '*test*'
    exec '%d'
    exec '!go test ./... 2>&1<ret>'
    ft grep
    exec 'gk'
    try %{
        exec '<a-K>^$<ret>'
    } catch %{
        db '*test*'
        echo "test OK"
    }
}

alias global gt go-test

map global normal @ q
map global normal <a-@> Q
